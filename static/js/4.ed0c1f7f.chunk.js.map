{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Massage/Massage.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Massage","props","className","classes","dialog","massageData","map","m","massage","DialogItem","dialogDat","to","id","name","Dialogs","dialogs","dialogsItems","massages","AddMassageReduxForm","onSubmit","value","addMassage","newMassageText","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","validate","required","DialogsContainer","dialogPage","useSelector","state","isAuth","auth","dispatch","useDispatch","addMassageAC","AuthRedirectComponent"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,2FCQrKC,EAAU,SAACC,GACpB,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SAEQH,EAAMI,YAAYC,KAAI,SAAAC,GACd,OACI,8BACKA,EAAEC,gB,QCNtBC,EAAa,SAACR,GAEvB,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SAEQH,EAAMS,UAAUJ,KAAI,SAAAC,GAChB,OACI,8BACI,cAAC,IAAD,CAASI,GAAI,YAAcJ,EAAEK,GAA7B,SAAkCL,EAAEM,e,iCCCnDC,EAAU,SAACb,GAOpB,OACI,sBAAKC,UAAWC,IAAQY,QAAxB,UACI,qBAAKb,UAAWC,IAAQa,aAAxB,SACI,cAAC,EAAD,CAAYN,UAAWT,EAAMS,cAEjC,sBAAKR,UAAWC,IAAQc,SAAxB,UACI,cAAC,EAAD,CAASZ,YAAaJ,EAAMI,cAC5B,cAACa,EAAD,CAAqBC,SAZX,SAACC,GAEnBnB,EAAMoB,WAAWD,EAAME,0BAmBzBC,EAAcC,YAAiB,IAoB/BN,EAAsBO,YAAwB,CAACC,KAAM,wBAA/BD,EAnBsC,SAACxB,GAE/D,OACI,uBAAMkB,SAAUlB,EAAM0B,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOf,KAAM,iBACNgB,YAAa,qBACbC,UAAWC,IACXC,SAAU,CAACC,IAAUV,OAGhC,8BACI,0D,QCdDW,UA9BU,SAACjC,GACtB,IAAIkC,EAAcC,aAA8C,SAAAC,GAAK,OAAIA,EAAMF,cAC3EG,EAASF,aAA2C,SAAAC,GAAK,OAAIA,EAAME,QACnEC,EAASC,cAIPpB,EAAa,SAACC,GACZkB,EAASE,YAAapB,KAOxBqB,EAAwB,WAC1B,OAAKL,EAAOA,OACL,cAAC,EAAD,CAASjB,WAAYA,EAEZX,UAAWyB,EAAWzB,UACtBL,YAAa8B,EAAW9B,YAExBiC,OAAQA,EAAOA,SANJ,cAAC,IAAD,CAAU3B,GAAI,YAU7C,OAAO,cAACgC,EAAD","file":"static/js/4.ed0c1f7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2hk2U\",\"dialogsItems\":\"Dialogs_dialogsItems__1a3wO\",\"active\":\"Dialogs_active__Dlg9-\",\"massages\":\"Dialogs_massages__2Kv1l\",\"massage\":\"Dialogs_massage__W2-ZW\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.css'\r\nimport {massageDataPropsType} from \"../../../redux/store\";\r\n\r\n\r\ntype MassagePropsType = {\r\n    massageData: Array<massageDataPropsType>\r\n}\r\n\r\nexport const Massage = (props: MassagePropsType) => {\r\n    return (\r\n        <div className={classes.dialog}>\r\n            {\r\n                props.massageData.map(m => {\r\n                        return (\r\n                            <div>\r\n                                {m.massage}\r\n                            </div>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './../Dialogs.module.css'\r\nimport {dialogDatPropsType} from \"../../../redux/store\";\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    dialogDat: Array<dialogDatPropsType>\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    return (\r\n        <div className={classes.dialog}>\r\n            {\r\n                props.dialogDat.map(m=> {\r\n                    return  (\r\n                        <div>\r\n                            <NavLink to={'/dialogs/' + m.id}>{m.name}</NavLink>\r\n                        </div>\r\n                    )\r\n                }\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport {Massage} from \"./Massage/Massage\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {\r\n    dialogDatPropsType,\r\n    massageDataPropsType,\r\n} from \"../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators\";\r\n\r\ntype MassageDialogPropsType = {\r\n    dialogDat: Array<dialogDatPropsType>,\r\n    massageData: Array<massageDataPropsType>\r\n    addMassage: (value: any) => void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: MassageDialogPropsType) => {\r\n\r\n    const addNewMessage = (value: any) => {\r\n\r\n        props.addMassage(value.newMassageText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                <DialogItem dialogDat={props.dialogDat}/>\r\n            </div>\r\n            <div className={classes.massages}>\r\n                <Massage massageData={props.massageData}/>\r\n                <AddMassageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newMassageText: string\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMassageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newMassageText'}\r\n                       placeholder={'Enter your massage'}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send massage</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMassageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMassageForm'})(AddMassageForm)","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addMassageAC, DialogStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {ReducerRootType} from \"../../redux/redux-store\";\r\nimport {AuthDataType} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MassageDialogPropsType = {\r\n}\r\n\r\nconst DialogsContainer = (props: MassageDialogPropsType) => {\r\n    let dialogPage =  useSelector<ReducerRootType, DialogStateType>(state => state.dialogPage)\r\n    let isAuth = useSelector<ReducerRootType, AuthDataType>(state => state.auth)\r\n    let dispatch=useDispatch();\r\n\r\n    // const newMassageElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    const addMassage = (newMassageText: string) => {\r\n            dispatch(addMassageAC(newMassageText))\r\n    }\r\n\r\n    // const messageChange = (text: string) => {\r\n    //         dispatch(updateNewMassageTextAC(text))\r\n    // }\r\n\r\n    const AuthRedirectComponent = () => {\r\n        if (!isAuth.isAuth) return <Redirect to={'/login'}/>\r\n        return(<Dialogs addMassage={addMassage}\r\n                        // messageChange={messageChange}\r\n                        dialogDat={dialogPage.dialogDat}\r\n                        massageData={dialogPage.massageData}\r\n                        // newMassageText={dialogPage.newMassageText}\r\n                        isAuth={isAuth.isAuth}\r\n        />)\r\n    }\r\n\r\n    return <AuthRedirectComponent />\r\n\r\n}\r\n\r\nexport default DialogsContainer"],"sourceRoot":""}