{"version":3,"sources":["redux/dialogs-reducer.ts","api/api.ts","components/Users/users.module.css","components/Navbar/Navbar.module.css","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/Music/Music.tsx","components/News/News.tsx","components/Settings/Settings.tsx","utils/object-helper.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","assets/images/pngwing.com.png","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/header/header.tsx","redux/auth-reducer.ts","components/header/headerContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","assets/images/loading-waiting.gif","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/common/Paginator/Paginator.module.css","utils/validators.ts","components/header/header.module.css","redux/profile-reducer.ts"],"names":["ADD_MASSAGE","initialState","dialogDat","name","id","massageData","massage","addMassageAC","newMassageText","type","dialogsReducer","state","action","newMassage","push","instanseAxios","axios","create","baseURL","withCredentials","headers","userAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","authAPI","me","login","email","password","rememberMe","logout","getStatus","updateStatus","status","put","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","NavBar","className","classes","nav","item","to","activeClassName","active","Music","News","Settings","updateObjectInArray","items","itemsId","objPropName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURREN_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","payload","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingInProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","selectedPage","page","e","User","user","src","photos","small","userPhoto","usersPhoto","disabled","some","Users","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","props","onPageChangedThunkCreator","this","getUsersThunkCreator","Preloader","React","Component","compose","connect","bind","totalCount","Header","header","loginBlock","isAuth","SET_USER_DATA","setAuthUserData","getAuthUsersData","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","required","style","formSummeryError","message","messages","length","stopSubmit","_error","formData","initialized","appReducer","reducers","combineReducers","profilePage","profileReducer","dialogPage","app","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Suspense","fallback","AppContainer","withRouter","SamuraiJSApp","ReactDOM","StrictMode","document","getElementById","FormControl","input","meta","touched","children","hasError","formControl","Textarea","restProps","child","placeholder","component","validators","text","validate","preloader","value","maxLengthCreator","maxlength","ADD_POST","DELETE_POST","SET_USER_PROFILE","SET_STATUS","massageMyPost","likesCounter","newPostText","profile","addPostAC","setStatus","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.a100d7ec.chunk.js","sourcesContent":["import {\r\n    dialogDatPropsType,\r\n    DispatchActionType,\r\n    massageDataPropsType\r\n} from \"./store\";\r\n\r\nconst ADD_MASSAGE = 'ADD_MASSAGE'\r\n\r\nlet initialState = {\r\n    dialogDat: [\r\n        {name: 'Dima', id: '1'},\r\n        {name: 'Roma', id: '2'},\r\n        {name: 'Petya', id: '3'},\r\n        {name: 'Sasha', id: '4'}\r\n    ],\r\n    massageData: [\r\n        {massage: \"Hello, how are you?\", id: \"1\"},\r\n        {massage: \"I'm fine, and you?\", id: '2'},\r\n        {massage: \"I'am ok. Today is bad wather.\", id: '3'}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: DialogStateType = initialState, action: DispatchActionType) => {\r\n    switch (action.type) {\r\n        case ADD_MASSAGE:\r\n            let newMassage: massageDataPropsType = {\r\n                massage: action.newMassageText,\r\n                id: \"4\"\r\n            }\r\n            state.massageData.push(newMassage);\r\n            return {\r\n                ...state, massageData: [...state.massageData]\r\n                // ...state, newMassageText: '', massageData: [...state.massageData, newMassage]\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const addMassageAC = (newMassageText: string) => {\r\n    return {\r\n        type: ADD_MASSAGE,\r\n        newMassageText: newMassageText\r\n    } as const\r\n}\r\n\r\nexport type DialogStateType = {\r\n    dialogDat: Array<dialogDatPropsType>\r\n    massageData: Array<massageDataPropsType>\r\n}\r\nexport type AddMassageActionType = ReturnType<typeof addMassageAC>\r\n\r\nexport default dialogsReducer","import axios from \"axios\";\r\n\r\nconst instanseAxios = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd6f0e227-87d6-4128-94b7-d0624916d5da',\r\n    },\r\n})\r\n\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instanseAxios.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instanseAxios.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instanseAxios.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please use profileIPA object')\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instanseAxios.get(`auth/me`)\r\n    },\r\n    login(email:string, password:string, rememberMe: boolean = false) {\r\n        return instanseAxios.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instanseAxios.delete(`auth/login`)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instanseAxios.get(`profile/${userId}`)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instanseAxios.get(`profile/status/${userId}`)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instanseAxios.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"users_usersPhoto__QwenH\",\"selectedPage\":\"users_selectedPage__nbLyG\",\"page\":\"users_page__28p0w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2bQqn\",\"item\":\"Navbar_item__3Ni0a\",\"active\":\"Navbar_active__WiIEV\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nexport const NavBar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}>\r\n            <NavLink to='/profile' activeClassName={classes.active}>Profil</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to='/dialogs' activeClassName={classes.active}>Messages</NavLink>\r\n        </div >\r\n        <div className={classes.item}>\r\n            <NavLink to='/users' activeClassName={classes.active}>Users</NavLink>\r\n        </div >\r\n        <div className={classes.item}>\r\n            <NavLink to='/news' activeClassName={classes.active} >News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to='/music' activeClassName={classes.active}>Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to='/settings' activeClassName={classes.active}>Settings</NavLink>\r\n        </div>\r\n    </nav>\r\n}","import React from \"react\";\r\nimport classes from './Music.module.css'\r\n\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport classes from './News.module.css'\r\n\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport classes from './Settings.module.css'\r\n\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n\r\n    )\r\n\r\n}","\r\nexport const updateObjectInArray = (items: Array<any>, itemsId: number, objPropName:string, newObjProps:{followed: boolean}) => {\r\n   return items.map(u => {\r\n    if (u[objPropName] === itemsId) {\r\n        return {...u, ...newObjProps}\r\n    }\r\n        return u\r\n    }\r\n)\r\n}","import {userAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {updateObjectInArray} from \"../utils/object-helper\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURREN_PAGE = 'SET_CURREN_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState: ProfileStateType = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 2,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n}\r\n\r\nconst usersReducer = (state: ProfileStateType = initialState, action: ActionType): ProfileStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.payload.userId, 'id', {followed: true} )\r\n                // users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: true} : u)\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.payload.userId, 'id', {followed: false} )\r\n                // users: state.users.map(u => u.id === action.payload.userId ? {...u, followed: false} : u)\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.payload.users]\r\n            }\r\n        case SET_CURREN_PAGE:\r\n            return {\r\n                ...state, currentPage: action.payload.currentPage\r\n            }\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.payload.totalUsersCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.payload.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress:\r\n                    action.payload.isFetching\r\n                        ? [...state.followingInProgress, action.payload.userId]\r\n                        : [state.followingInProgress.filter(id => id != action.payload.userId)]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        payload: {userId,}\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        payload: {userId,}\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<usersType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        payload: {users,}\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURREN_PAGE,\r\n        payload: {currentPage,}\r\n    } as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        payload: {totalUsersCount,}\r\n    } as const\r\n\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        payload: {isFetching,}\r\n    } as const\r\n}\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        payload: {isFetching, userId}\r\n    } as const\r\n}\r\n\r\nexport const getUsersThunkCreator = (page: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(page))\r\n        const response = await userAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items));\r\n        dispatch(setTotalUsersCount(response.totalCount))\r\n    }\r\n}\r\nexport const onPageChangedThunkCreator = (pageNumber: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPage(pageNumber))\r\n        const response = await userAPI.getUsers(pageNumber, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(response.items))\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch<ActionType>,\r\n                                  userId: number,\r\n                                  apiMethod: any,\r\n                                  actionCreator: any\r\n) => {\r\n    dispatch(toggleFollowingInProgress(true, userId))\r\n    const response = await apiMethod(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingInProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        let apiMethod = userAPI.follow.bind(userAPI)\r\n        let actionCreator = followSuccess\r\n        followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n    }\r\n}\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch<ActionType>) => {\r\n        let apiMethod = userAPI.unfollow.bind(userAPI)\r\n        let actionCreator = unfollowSuccess\r\n        followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n    }\r\n}\r\n\r\nexport type ActionType = FollowActionType\r\n    | UnfollowActionType\r\n    | SetUsersActionType\r\n    | SetCurrentPageType\r\n    | SetTotalUsersCountType\r\n    | ToggleIsFetchingType\r\n    | ToggleFollowingInProgressType\r\nexport type FollowActionType = ReturnType<typeof followSuccess>\r\nexport type UnfollowActionType = ReturnType<typeof unfollowSuccess>\r\nexport type SetUsersActionType = ReturnType<typeof setUsers>\r\nexport type SetCurrentPageType = ReturnType<typeof setCurrentPage>\r\nexport type SetTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\r\nexport type ToggleIsFetchingType = ReturnType<typeof toggleIsFetching>\r\nexport type ToggleFollowingInProgressType = ReturnType<typeof toggleFollowingInProgress>\r\nexport type ProfileStateType = {\r\n    users: Array<usersType>\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<any>,\r\n}\r\nexport type usersType = {\r\n    id: number,\r\n    photos: { small: string },\r\n    followed: boolean,\r\n    name: string,\r\n    status: string,\r\n    location: LocationType,\r\n}\r\ntype LocationType = {\r\n    city: string,\r\n    country: string,\r\n}\r\n\r\nexport default usersReducer","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\ntype PropsType = {\r\n    onPageChanged: (p: number) => void\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    portionSize: number\r\n\r\n}\r\n\r\nexport const Paginator = ({ pageSize, totalItemsCount, onPageChanged, currentPage, portionSize, ...props}: PropsType) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState<number>(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n\r\n    return (\r\n            <div className={styles.paginator}>\r\n                {portionNumber > 1 &&\r\n                    <button onClick={()=>{setPortionNumber(portionNumber - 1)}}>Prev</button> }\r\n                {pages\r\n                    .filter(p => p >= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n                    .map(p => {\r\n                    return (\r\n                        <span\r\n                            className={currentPage === p ? styles.selectedPage + ' ' + styles.page : styles.page}\r\n                            onClick={(e) => {\r\n                                onPageChanged(p);\r\n                            }}\r\n                        key={p}>{p}</span>\r\n                    )\r\n                })}\r\n                {portionCount > portionNumber &&\r\n                <button onClick={()=>{setPortionNumber(portionNumber + 1)}}>Next</button> }\r\n            </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/pngwing.com.157e4958.png\";","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/pngwing.com.png\";\r\nimport {usersType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    user: usersType,\r\n    follow: (userId: number) => void,\r\n    unfollow: (userId: number) => void,\r\n    followingInProgress: Array<any>,\r\n}\r\n\r\nexport const User = ({user, followingInProgress, unfollow, follow}: PropsType) => {\r\n    return (\r\n        <div>\r\n    <span>\r\n        <div>\r\n            <NavLink to={'/profile/' + user.id}>\r\n            <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.usersPhoto}/>\r\n            </NavLink>\r\n        </div>\r\n        <div>\r\n            {user.followed\r\n                ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                          onClick={() => {\r\n                              unfollow(user.id)\r\n                          }\r\n                          }>Unfollow</button>\r\n                : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                          onClick={() => {\r\n                              follow(user.id)\r\n                          }\r\n                          }>Follow</button>}\r\n        </div>\r\n    </span>\r\n            <span>\r\n        <span>\r\n            <div>{user.name}</div>\r\n            <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n            <div>{\"user.location.country\"}</div>\r\n            <div>{\"user.location.city\"}</div>\r\n        </span>\r\n    </span>\r\n        </div>\r\n)\r\n}","import React from \"react\";\r\nimport {usersType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\n\r\ntype PropsType = {\r\n    onPageChanged: (p: number) => void\r\n    users: Array<usersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    followingInProgress: Array<any>,\r\n}\r\n\r\nexport const Users = ({\r\n                          pageSize,\r\n                          totalUsersCount,\r\n                          onPageChanged,\r\n                          currentPage,\r\n                          users,\r\n                          follow,\r\n                          unfollow,\r\n                          followingInProgress,\r\n                          toggleFollowingInProgress,\r\n                          ...props\r\n                      }: PropsType) => {\r\n    let portionSize = 10\r\n    return (\r\n        <div>\r\n            <Paginator onPageChanged={onPageChanged} pageSize={pageSize} totalItemsCount={totalUsersCount}\r\n                          currentPage={currentPage} portionSize={portionSize}/>\r\n            <div>\r\n                {\r\n                    users.map(u => <User user={u} key={u.id} follow={follow} unfollow={unfollow}\r\n                                         followingInProgress={followingInProgress}/>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ReducerRootType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getUsersSelector = (state: ReducerRootType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true)\r\n    }\r\n)\r\nexport const getPageSize = (state: ReducerRootType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: ReducerRootType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: ReducerRootType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: ReducerRootType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: ReducerRootType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReducerRootType} from \"../../redux/redux-store\";\r\nimport {\r\n    setCurrentPage,\r\n    toggleIsFetching,\r\n    setTotalUsersCount,\r\n    setUsers,\r\n    usersType,\r\n    toggleFollowingInProgress,\r\n    getUsersThunkCreator,\r\n    onPageChangedThunkCreator,\r\n follow, unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype MapStateType = {\r\n    users: Array<usersType>\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<any>,\r\n}\r\n\r\ntype MapDispatchType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<usersType>) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsersCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => void\r\n    getUsersThunkCreator:(currentPage: number, pageSize: number) => void\r\n    onPageChangedThunkCreator:(pageNumber: number, pageSize: number) => void\r\n}\r\n\r\nexport type UsersPropsType = MapStateType & MapDispatchType\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsersThunkCreator(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.onPageChangedThunkCreator(pageNumber, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                unfollow={this.props.unfollow}\r\n                follow={this.props.follow}\r\n                users={this.props.users}\r\n                toggleFollowingInProgress={this.props.toggleFollowingInProgress}\r\n                onPageChanged={this.onPageChanged}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerRootType): MapStateType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\nconnect(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    toggleIsFetching,\r\n    toggleFollowingInProgress,\r\n    getUsersThunkCreator,\r\n    onPageChangedThunkCreator,\r\n})\r\n)(UsersContainer)","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from './header.module.css'\r\n\r\ntype PropsType = {\r\n    login: string\r\n    isAuth: boolean\r\n    logout: ()=>void\r\n}\r\n\r\nexport const Header = (props: PropsType) => {\r\n    return <header className={classes.header}>\r\n\r\n        <img src='https://w7.pngwing.com/pngs/941/692/png-transparent-black-small-apple-logo-logo-material-apple-logo-black.png'></img>\r\n        <div className={classes.loginBlock}>\r\n            {props.isAuth\r\n                ? <div> {props.login} - <button onClick={props.logout}>Lod out</button></div>\r\n\r\n                : <NavLink to={'/login'}>Login</NavLink>}\r\n        </div>\r\n\r\n    </header>\r\n}","import {authAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {ReducerRootType} from './redux-store'\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'auth/SET_USER_DATA';\r\n\r\nlet initialState: AuthDataType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n}\r\n\r\nconst authReducer = (state: AuthDataType = initialState, action: ActionType): AuthDataType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, login: string | null, email: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, login, email, isAuth}\r\n    } as const\r\n}\r\n\r\nexport const getAuthUsersData = () => async (dispatch: Dispatch<ActionType>) => {\r\n    let response = await authAPI.me()\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data\r\n                dispatch(setAuthUserData(id, login, email, true))\r\n            }\r\n}\r\nexport const login = (email:string, password:string, rememberMe: boolean): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUsersData())\r\n            } else {\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error!'\r\n                let action: any = stopSubmit('login', {_error: message})\r\n                dispatch(action)\r\n            }\r\n}\r\nexport const logout = () => async (dispatch: Dispatch<ActionType>) => {\r\n    let response = await authAPI.logout()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false))\r\n            }\r\n}\r\n\r\nexport type AuthType = {\r\n    resultCode: number | null\r\n    messages: []\r\n    data: AuthDataType\r\n}\r\nexport type AuthDataType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\ntype ThunkType = ThunkAction<void, ReducerRootType, unknown, ActionType>;\r\nexport type ActionType = SetUserDataActionType\r\nexport type SetUserDataActionType = ReturnType<typeof setAuthUserData>\r\nexport default authReducer\r\n\r\n","import React from \"react\";\r\nimport {Header} from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthDataType, logout} from \"../../redux/auth-reducer\";\r\nimport {ReducerRootType} from \"../../redux/redux-store\";\r\n\r\n\r\nclass HeaderContainer extends React.Component<any> {\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUsersData();\r\n    // }\r\n    render() {\r\n\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout}/>\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerRootType):AuthDataType => {\r\n   return {\r\n       isAuth: state.auth.isAuth,\r\n       login: state.auth.login,\r\n       userId: state.auth.userId,\r\n       email: state.auth.email,\r\n   }\r\n\r\n}\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ReducerRootType} from \"../../redux/redux-store\";\r\nimport style from '../common/FormsControls/FormsControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error,...props}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', Input, [required])}\r\n            {createField('Password', 'password', Input, [required], {type: 'password'})}\r\n            {createField(null, 'rememberMe', Input, [], {type: 'checkbox'}, 'remember me')}\r\n\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'Email'} name={'email'} component={Input}*/}\r\n            {/*           validate={[required]}*/}\r\n            {/*    />*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field placeholder={'Password'} name={'password'} component={Input} type={'password'}*/}\r\n            {/*           validate={[required]}*/}\r\n            {/*    />*/}\r\n            {/*</div>*/}\r\n            {/*<div>*/}\r\n            {/*    <Field component={Input} name={'rememberMe'} type=\"checkbox\"*/}\r\n            {/*    /> remember me*/}\r\n            {/*</div>*/}\r\n            {error && <div className={style.formSummeryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: any) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n        debugger\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerRootType): any => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import {getAuthUsersData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ReducerRootType} from \"./redux-store\";\r\n\r\nexport type InitType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state: InitType = initialState, action: ActionType): InitType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type ActionType = InitializedSuccessActionType\r\n\r\nexport type InitializedSuccessActionType = ReturnType<typeof initializedSuccess>\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: 'INITIALIZED_SUCCESS',\r\n    } as const\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, ReducerRootType, unknown, ActionType>;\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n   let promise = dispatch(getAuthUsersData())\r\n    promise\r\n        .then(()=>{\r\n        dispatch(initializedSuccess())\r\n        }\r\n    )\r\n}\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware  from \"redux-thunk\"\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n});\r\n\r\nexport type ReducerRootType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store","import React from 'react';\nimport './App.css';\nimport {NavBar} from './components/Navbar/Navbar';\nimport {BrowserRouter, HashRouter, Route, withRouter} from \"react-router-dom\";\nimport {Music} from \"./components/Music/Music\";\nimport {News} from \"./components/News/News\";\nimport {Settings} from \"./components/Settings/Settings\";\n\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\nimport HeaderContainer from \"./components/header/headerContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp, InitType} from \"./redux/app-reducer\";\nimport store, {ReducerRootType} from \"./redux/redux-store\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n\ntype AppPropsType = {\n    initializeApp: ()=>any\n    initialized: InitType\n}\n\nclass App extends React.Component<AppPropsType> {\n    componentDidMount() {\n        this.props.initializeApp();\n    }\n    render() {\n        if(!this.props.initialized) {\n            return <Preloader />\n        }\n        return (\n                <div className='app-wrapper'>\n                    <HeaderContainer/>\n                    <NavBar/>\n                    <div className='app-wrapper-content'>\n                        <Route path='/dialogs'\n                               render={() => {\n                                   return  <React.Suspense fallback={<Preloader />}>\n                                   <DialogsContainer/>\n                                   </React.Suspense>\n                               }}/>\n                        <Route path='/profile/:userId?'\n                               render={() => {\n                                   return  <React.Suspense fallback={<Preloader />}>\n                                   <ProfileContainer/>\n                                   </React.Suspense>\n                               }}/>\n                        <Route path='/music'\n                               render={() => <Music/>}/>\n                        <Route path='/news'\n                               render={() => <News/>}/>\n                        <Route path='/settings'\n                               render={() => <Settings/>}/>\n                        <Route path='/users'\n                               render={() => <UsersContainer/>}/>\n                        <Route path='/login'\n                               render={() => <Login/>}/>\n                    </div>\n                </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: ReducerRootType):InitType => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App)\n\nconst SamuraiJSApp = () => {\n return (\n     <HashRouter>\n            <Provider store={store}>\n                <AppContainer/>\n            </Provider>\n        </HashRouter>\n)\n}\n\nexport default SamuraiJSApp","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./redux/redux-store\";\nimport {Provider} from \"react-redux\";\nimport {StoreType} from \"./redux/store\";\nimport { BrowserRouter } from 'react-router-dom';\nimport SamuraiJSApp from \"./App\";\n\n\n// let rerenderEntireTree = (state: StoreType) => {\n\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <SamuraiJSApp />\n           {/* <BrowserRouter>*/}\n           {/*<Provider store={store}>*/}\n           {/* <App/>*/}\n           {/*</Provider>*/}\n           {/*     </BrowserRouter>*/}\n        </React.StrictMode>,\n        document.getElementById('root')\n    )\n// }\n// rerenderEntireTree(store.getState());\n// store.subscribe(()=>rerenderEntireTree(store.getState()));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, {FC, ReactElement} from \"react\";\r\nimport styles from './FormsControls.module.css'\r\nimport {required} from \"../../../utils/validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl: React.FC<any> = ({input, meta: {touched, error}, children, ...props}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {/*<textarea {...input} {...props} />*/}\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<any> = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport const Input: React.FC<any> = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps} /> </FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, component: any, validators: (any | undefined)[],  props = {}, text = \"\" ) => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name} component={component} validate={validators} {...props}/> {text}\r\n    </div>\r\n)","export default __webpack_public_path__ + \"static/media/loading-waiting.ccaed95b.gif\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/loading-waiting.gif\";\r\n\r\nexport const Preloader = () =>{\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form-control\":\"FormsControls_form-control__yOJD0\",\"formControl\":\"FormsControls_formControl__194iG\",\"error\":\"FormsControls_error__3Z6nB\",\"formSummeryError\":\"FormsControls_formSummeryError__29bQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__x3JVP\",\"selectedPage\":\"Paginator_selectedPage__3XK0K\",\"page\":\"Paginator_page__12C5g\"};","import React from \"react\";\r\n\r\nexport const required = (value: any) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxlength: any) => (value: any) => {\r\n    if (value.length > maxlength) return `Max length ${maxlength} symbols`\r\n    return undefined\r\n\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__XKB1_\",\"loginBlock\":\"header_loginBlock__3xY9M\"};","import {massageMyPostPropsType} from \"./store\";\r\nimport {profileAPI, userAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_POST = 'ADD_POST'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\n\r\nlet initialState = {\r\n    massageMyPost: [\r\n        {id: '1', massage: 'Hi, how are you?', likesCounter: '5'},\r\n        {id: '2', massage: \"It's my first post\", likesCounter: '12'}\r\n    ],\r\n    newPostText: 'it-kamasutra.com',\r\n    profile: '',\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state: ProfileStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            let newPost: massageMyPostPropsType = {\r\n                id: '5',\r\n                massage: action.newPostText,\r\n                likesCounter: '0'\r\n            }\r\n            state.massageMyPost.push(newPost);\r\n            return {...state, massageMyPost: [...state.massageMyPost]};\r\n        case SET_STATUS:\r\n            return {...state, status: action.payload.status};\r\n\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: {...action.payload.profile}};\r\n        case DELETE_POST:\r\n            return {...state, massageMyPost: state.massageMyPost.filter(p => p.id != action.postId)};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText: newPostText,\r\n\r\n    } as const\r\n}\r\nexport const deletePostAC = (postId: string) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId: postId,\r\n\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        payload: {profile}\r\n    } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        payload: {status}\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch<ActionType>) => {\r\n    const response = await userAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data));\r\n}\r\nexport const getStatus = (userId: string) => async (dispatch: Dispatch<ActionType>) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data));\r\n\r\n}\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch<ActionType>) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(setStatus(status));\r\n        }\r\n}\r\n\r\ntype ActionType = AddPostActionType | SetUserProfileActionType | SetStatusActionType | DeletePostActionType\r\nexport type SetUserProfileActionType = ReturnType<typeof setUserProfile>\r\nexport type DeletePostActionType = ReturnType<typeof deletePostAC>\r\nexport type AddPostActionType = ReturnType<typeof addPostAC>\r\nexport type SetStatusActionType = ReturnType<typeof setStatus>\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    fullName: string\r\n    photos: { large: string, small: string }\r\n}\r\nexport type ProfileStateType = {\r\n    newPostText: string,\r\n    massageMyPost: Array<massageMyPostPropsType>,\r\n    profile: any,\r\n    status: string,\r\n}\r\n\r\nexport default profileReducer"],"sourceRoot":""}