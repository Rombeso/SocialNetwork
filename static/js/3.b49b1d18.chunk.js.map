{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","data-testid","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","classes","image","src","descriptionBlock","photos","large","alt","fullName","aboutMe","Preloader","Post","item","massageMyPost","map","m","massage","likesCounter","MyPosts","postBlock","posts","AddNewPostReduxForm","onSubmit","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","profilePage","useSelector","state","dispatch","useDispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","String","history","push","getUserProfile","getStatus","React","Component","compose","connect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.b49b1d18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1gOJZ\",\"image\":\"ProfileInfo_image__1MXCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__YjCh1\",\"posts\":\"MyPosts_posts__12cV9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__bwKX2\"};","import React, {HTMLInputTypeAttribute, useEffect, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\n\r\nexport type PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\nlet [editMode, setEditMode] = useState(false);\r\nlet [status, setStatus] = useState(props.status);\r\n\r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n}, [props.status])\r\n\r\n    const activeEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n            props.updateStatus(status)\r\n\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span  data-testid=\"status\" onDoubleClick={activeEditMode}>{props.status || \"Enter your status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input data-testid=\"status-input\"\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileStateType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, updateStatus, status}: PropsType) => {\r\n     if (!profile) {\r\n         return <Preloader/>\r\n     }\r\n    return (\r\n    <div>\r\n        <div >\r\n            <img className={classes.image} src='https://myrzik.com/wp-content/uploads/2012/11/0585.jpg'></img>\r\n        </div>\r\n        <div className={classes.descriptionBlock}>\r\n            <img src={profile.photos.large} alt=\"\"/>\r\n            <ProfileStatusWithHooks status={status}  updateStatus={updateStatus}/>\r\n            <p>{'Full name: ' +  profile.fullName}</p>\r\n            <p>{'About me: ' +  profile.aboutMe}</p>\r\n        </div>\r\n    </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from './Post.module.css'\r\nimport {massageMyPostPropsType} from \"../../../../redux/store\";\r\n\r\ntype MassageMyPostPropsType = {\r\n    massageMyPost: Array<massageMyPostPropsType>\r\n}\r\nexport const Post = (props: MassageMyPostPropsType) => {\r\n\r\n    return (\r\n\r\n        <div className={classes.item}>\r\n            {\r\n                props.massageMyPost.map(m => {\r\n                    return (\r\n                        <div>\r\n                            <img\r\n                                src='https://telegid.com/wp-content/uploads/2021/06/%D0%9F%D0%B5%D1%80%D0%B5%D0%B2%D1%82%D1%96%D0%BB%D0%B5%D0%BD%D0%BD%D1%8F-%D0%A1%D0%B5%D0%BC%D0%B0-%D0%92%D0%BE%D1%80%D1%82%D1%96%D0%BD%D0%B3%D1%82%D0%BE%D0%BD%D0%B0.jpg'></img>\r\n                            <div>\r\n                                {m.massage}\r\n                            </div>\r\n                            <div>\r\n                                {m.likesCounter}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {massageMyPostPropsType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype SomePT = {\r\n    massageMyPost: Array<massageMyPostPropsType>\r\n    newPostText: string\r\n    addPost: (value: any) => void\r\n}\r\n\r\nexport const MyPosts = (props: SomePT) => {\r\n\r\n    let addNewPost = (value: any) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postBlock}>\r\n            <h3>My posts</h3>\r\n            <div className={classes.posts}>\r\n                <AddNewPostReduxForm onSubmit={addNewPost}/>\r\n                <Post massageMyPost={props.massageMyPost}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={'newPostText'}\r\n                    placeholder={'Enter your massage'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n  }\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'myPostAddNewForm'})(AddNewPostForm)","import React from \"react\";\r\nimport {DispatchActionType, massageMyPostPropsType} from \"../../../redux/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPostAC, ProfileStateType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {ReducerRootType} from \"../../../redux/redux-store\";\r\n\r\ntype SomePT = {}\r\n\r\nexport const MyPostsContainer = (props: SomePT) => {\r\n    let profilePage = useSelector<ReducerRootType, ProfileStateType>(state => state.profilePage)\r\n    let dispatch = useDispatch();\r\n\r\n    const addPost = (newPostText: string) => {\r\n        dispatch(addPostAC(newPostText))\r\n    }\r\n\r\n    return (<MyPosts\r\n            massageMyPost={profilePage.massageMyPost}\r\n            newPostText={profilePage.newPostText}\r\n            addPost={addPost}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\n\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileStateType, ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype MassageMyPostPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const Profile = (props: MassageMyPostPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer\r\n            />\r\n        </div>)\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReducerRootType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type MapStateType = {\r\n    profile?: any\r\n    isAuth?: boolean\r\n    status: string\r\n    autorizedUserId: number | null\r\n}\r\n\r\ntype MapDispatchType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStateType & MapDispatchType & PathParamsType\r\ntype CommonType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId !== null ? String(this.props.autorizedUserId) : '';\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n            </div>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerRootType): MapStateType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}