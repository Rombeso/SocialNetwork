{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","assets/photos/1.jpg","assets/photos/2.jpg","assets/photos/3.jpg","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","data-testid","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","style","width","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","onSubmit","className","s","formSubmit","createField","Input","type","Textarea","formSummeryError","divBodyButton","profileBodyButton","Post","massageMyPost","map","m","title","avatar","src","profile","photos","large","userPhoto","name","login","massage","footer","love","xmlns","fill","viewBox","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","likesCounter","eye","viewers","line","MyPosts","useDispatch","dispatch","reset","postBlock","addPosts","fieldBlock","AddNewPostReduxForm","addPost","newPostText","myPostsBlock","myPostsTitle","maxLength100","maxLengthCreator","Field","placeholder","component","validate","required","fieldButton","MyPostsContainer","profilePage","useSelector","state","addPostAC","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","centerContainer","imageBlock","avatarButton","target","files","friendsContainer","friendsTitle","to","friendBlock","UsersContainer","rightContainer","descriptionBlock","profileBlock","profileHeaders","profileLogin","profileOnline","profileBody","initialValues","formDataProfile","then","goToEditMode","myPhotosContainer","myPhotosBlock","myPhotosTitle","photo1","photo2","photo3","ProfileData","profileBodyTitle","contactsTitle","profileBodyDescription","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","facebook","website","vk","onClick","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","String","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","connect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.e353b269.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"centerContainer\":\"ProfileInfo_centerContainer__36H7_\",\"imageBlock\":\"ProfileInfo_imageBlock__Jf9M5\",\"avatar\":\"ProfileInfo_avatar__JY-Pn\",\"avatarButton\":\"ProfileInfo_avatarButton__3ACRj\",\"friendsContainer\":\"ProfileInfo_friendsContainer__1PR6z\",\"friendsTitle\":\"ProfileInfo_friendsTitle__19NTy\",\"friendBlock\":\"ProfileInfo_friendBlock__1krx8\",\"rightContainer\":\"ProfileInfo_rightContainer__35_pw\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1gOJZ\",\"profileBlock\":\"ProfileInfo_profileBlock__WdJVM\",\"profileHeaders\":\"ProfileInfo_profileHeaders__7GaME\",\"profileLogin\":\"ProfileInfo_profileLogin__YmbUf\",\"profileOnline\":\"ProfileInfo_profileOnline__2NXyT\",\"status\":\"ProfileInfo_status__2D4Nh\",\"line\":\"ProfileInfo_line__1JWbh\",\"profileBody\":\"ProfileInfo_profileBody__2FW1u\",\"profileBodyTitle\":\"ProfileInfo_profileBodyTitle__3pbpe\",\"profileBodyDescription\":\"ProfileInfo_profileBodyDescription__36IhQ\",\"myPhotosContainer\":\"ProfileInfo_myPhotosContainer__3TL3e\",\"myPhotosBlock\":\"ProfileInfo_myPhotosBlock__ZzSbB\",\"myPhotosTitle\":\"ProfileInfo_myPhotosTitle__1V-Qk\",\"profileBodyButton\":\"ProfileInfo_profileBodyButton__1SIMd\",\"photos\":\"ProfileInfo_photos__24K-g\",\"myPostsContainer\":\"ProfileInfo_myPostsContainer__2yhvq\",\"myPostsBlock\":\"ProfileInfo_myPostsBlock__24r7Y\",\"contactsTitle\":\"ProfileInfo_contactsTitle__1R-Sn\",\"formSubmit\":\"ProfileInfo_formSubmit__fPUOb\",\"divBodyButton\":\"ProfileInfo_divBodyButton__3c33L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__YjCh1\",\"addPosts\":\"MyPosts_addPosts__2grjD\",\"myPostsBlock\":\"MyPosts_myPostsBlock__3bJHi\",\"userPhoto\":\"MyPosts_userPhoto__1pMNO\",\"line\":\"MyPosts_line__3q-lS\",\"myPostsTitle\":\"MyPosts_myPostsTitle__1kOb2\",\"fieldBlock\":\"MyPosts_fieldBlock__Bnfcs\",\"fieldButton\":\"MyPosts_fieldButton__3ueea\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Post_title__3L9aY\",\"avatar\":\"Post_avatar__49n4v\",\"name\":\"Post_name__1_dkk\",\"massage\":\"Post_massage__102Og\",\"line\":\"Post_line__GnsFa\",\"footer\":\"Post_footer__WkYd9\",\"love\":\"Post_love__Di3m7\",\"eye\":\"Post_eye__-ys5D\"};","import React, {HTMLInputTypeAttribute, useEffect, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\n\r\nexport type PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n\r\nlet [editMode, setEditMode] = useState(false);\r\nlet [status, setStatus] = useState(props.status);\r\n\r\nuseEffect(()=>{\r\n    setStatus(props.status)\r\n}, [props.status])\r\n\r\n    const activeEditMode = ()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n            props.updateStatus(status)\r\n\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <span  data-testid=\"status\" onDoubleClick={activeEditMode}>{props.status || \"Enter your status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input data-testid=\"status-input\"\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                       style={{width: 300}}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string\r\n    lookingForAJob:boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormProfileDataType>> = ({handleSubmit, error, ...props}) => {\r\n\r\n    // @ts-ignore\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.formSubmit}>\r\n            {/*<div className={s.profileBodyTitle}>*/}\r\n            {/*    <p>Full name:</p>*/}\r\n            {/*    <p>Looking for a job:</p>*/}\r\n            {/*    <p>My professional skills:</p>*/}\r\n            {/*    <p>About me:</p>*/}\r\n            {/*    <div className={s.contacts}><b>Contacts:</b></div>*/}\r\n            {/*    <p>Facebook:</p>*/}\r\n            {/*    <p>Website:</p>*/}\r\n            {/*    <p>VK:</p>*/}\r\n            {/*</div>*/}\r\n            {/*<div className={s.profileBodyDescription}>*/}\r\n            {/*    <p>{createField('Full name', 'fullName', Input, [])}</p>*/}\r\n            {/*    <p> {createField('', 'lookingForAJob', Input, [], {type: 'checkbox'})}</p>*/}\r\n            {/*    <p> {createField('My professional skills', 'lookingForAJobDescription', Textarea, [])}</p>*/}\r\n            {/*    <p> {createField('About me', 'aboutMe', Input, [])}</p>*/}\r\n            {/*    <p> {createField('Facebook', 'contacts.facebook', Input, [])}</p>*/}\r\n            {/*    <p>{createField('Web site', 'contacts.website', Input, [])}</p>*/}\r\n            {/*    <p>{createField('VK', 'contacts.vk', Input, [])}</p>*/}\r\n            {/*</div>*/}\r\n\r\n            <p><b>Full name:</b> {createField('Full name', 'fullName', Input, [])}</p>\r\n            <p><b>Looking for a job:</b> {createField('', 'lookingForAJob', Input, [], {type: 'checkbox'})}</p>\r\n            <p><b>My professional skills:</b> {createField('My professional skills', 'lookingForAJobDescription', Textarea, [])}</p>\r\n            <p><b>About me:</b> {createField('About me', 'aboutMe', Input, [])}</p>\r\n            <p><b>Facebook:</b>{createField('Facebook', 'contacts.facebook', Input, [])}</p>\r\n            <p><b>Website:</b>{createField('Web site', 'contacts.website', Input, [])}</p>\r\n            <p><b>VK:</b>{createField('VK', 'contacts.vk', Input, [])}</p>\r\n            {error && <div className={style.formSummeryError}>\r\n                {error}\r\n            </div>}\r\n            <div className={s.divBodyButton}><button className={s.profileBodyButton}>Save</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<FormProfileDataType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {massageMyPostPropsType} from \"../../../../redux/store\";\r\nimport userPhoto from \"../../../../assets/images/pngwing.com.png\";\r\n\r\n\r\ntype MassageMyPostPropsType = {\r\n    massageMyPost: Array<massageMyPostPropsType>\r\n    profile: any\r\n    login: string | null\r\n}\r\nexport const Post = (props: MassageMyPostPropsType) => {\r\n\r\n    return (\r\n\r\n        <>\r\n            {\r\n                props.massageMyPost.map(m => {\r\n                    return (\r\n                        <>\r\n                            <div className={s.title}>\r\n                                <img className={s.avatar} src={props.profile.photos.large || userPhoto}/>\r\n                                <div className={s.name}>{props.login}\r\n                                    <p>today</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className={s.massage}>\r\n                                {m.massage}\r\n                            </div>\r\n                            <div className={s.footer}>\r\n                                <div className={s.love}>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\"\r\n                                         viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                              d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"/>\r\n                                    </svg>\r\n                                    <span>{m.likesCounter}</span>\r\n                                </div>\r\n                                <div  className={s.eye}>\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\"\r\n                                         viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                              d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"/>\r\n                                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                                              d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\"/>\r\n                                    </svg>\r\n                                    <span>{m.viewers}</span>\r\n                                </div>\r\n                            </div>\r\n                            <div className={s.line}></div>\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {massageMyPostPropsType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport userPhoto from \"../../../assets/images/pngwing.com.png\";\r\nimport {reset} from 'redux-form';\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype SomePT = {\r\n    massageMyPost: Array<massageMyPostPropsType>\r\n    newPostText: string\r\n    addPost: (value: any) => void\r\n    profile: any\r\n    login: string | null\r\n}\r\n\r\nexport const MyPosts = (props: SomePT) => {\r\n\r\n    let addNewPost = (value: any) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n    const dispatch = useDispatch()\r\n    dispatch(reset('myPostAddNewForm'));\r\n\r\n    return (\r\n        <>\r\n            <div className={s.postBlock}>\r\n\r\n                <div className={s.addPosts}>\r\n                    <div className={s.userPhoto}>\r\n                        <img\r\n                            src={props.profile.photos.large || userPhoto}/>\r\n                    </div>\r\n                    <div className={s.fieldBlock}>\r\n                    <AddNewPostReduxForm onSubmit={addNewPost} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.postBlock}>\r\n                <div className={s.myPostsBlock}>\r\n                    <div className={s.myPostsTitle}>All entries</div>\r\n                    <div className={s.line}></div>\r\n                    <Post massageMyPost={props.massageMyPost}\r\n                          profile={props.profile}\r\n                    login={props.login}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name={'newPostText'}\r\n                    placeholder={'What\\'s new with you?'}\r\n                    component={Textarea}\r\n                    validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button className={s.fieldButton}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'myPostAddNewForm'})(AddNewPostForm)","import React from \"react\";\r\nimport {DispatchActionType, massageMyPostPropsType} from \"../../../redux/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addPostAC, ProfileStateType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {ReducerRootType} from \"../../../redux/redux-store\";\r\n\r\ntype SomePT = {\r\n    login:string | null\r\n}\r\n\r\nexport const MyPostsContainer = (props: SomePT) => {\r\n    let profilePage = useSelector<ReducerRootType, ProfileStateType>(state => state.profilePage)\r\n    let dispatch = useDispatch();\r\n\r\n    const addPost = (newPostText: string) => {\r\n        dispatch(addPostAC(newPostText))\r\n    }\r\n\r\n    return (<MyPosts\r\n            massageMyPost={profilePage.massageMyPost}\r\n            newPostText={profilePage.newPostText}\r\n            addPost={addPost}\r\n            profile={profilePage.profile}\r\n            login={props.login}\r\n        />\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/1.c0db5a4b.jpg\";","export default __webpack_public_path__ + \"static/media/2.fa603d76.jpg\";","export default __webpack_public_path__ + \"static/media/3.e8fccc9b.jpg\";","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/pngwing.com.png\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm, {FormProfileDataType} from \"./ProfileDataForm\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nimport {MyPostsContainer} from \"../MyPosts/MyPostsContainer\";\r\nimport UsersContainer from \"../../Users/UsersContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport photo1 from './../../../assets/photos/1.jpg'\r\nimport photo2 from './../../../assets/photos/2.jpg'\r\nimport photo3 from './../../../assets/photos/3.jpg'\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formDataProfile: FormProfileDataType) => any\r\n    login: string | null\r\n}\r\n\r\nexport const ProfileInfo = ({profile, updateStatus, status, isOwner, savePhoto, saveProfile, login}: PropsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formDataProfile: FormProfileDataType) => {\r\n        saveProfile(formDataProfile).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.centerContainer}>\r\n                <div className={s.imageBlock}>\r\n                    <div className={s.avatar}>\r\n                        <img src={profile.photos.large || userPhoto}/>\r\n                    </div>\r\n\r\n                    {isOwner && <div className={s.avatarButton}>\r\n                        <p>Edit avatar</p>\r\n                        <input type={\"file\"} onChange={onMainPhotoSelected}/>\r\n                    </div>}\r\n                </div>\r\n\r\n                <div className={s.friendsContainer}>\r\n                    <div className={s.friendsTitle}>\r\n                        <NavLink to={'/friends'}>Friends</NavLink>\r\n                    </div>\r\n\r\n                    <div className={s.friendBlock}>\r\n                        <UsersContainer/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className={s.rightContainer}>\r\n                <div className={s.descriptionBlock}>\r\n                    <div className={s.profileBlock}>\r\n                        <div className={s.profileHeaders}>\r\n                            <div className={s.profileLogin}>{login}</div>\r\n                            <div className={s.profileOnline}>online</div>\r\n                        </div>\r\n                        <div className={s.status}>\r\n                            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n                        </div>\r\n                        <div className={s.line}></div>\r\n\r\n                        <div className={s.profileBody}>\r\n                            { editMode\r\n                            ? <ProfileDataFormReduxForm initialValues={profile} onSubmit={onSubmit}/>\r\n                            : <ProfileData goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }} profile={profile} isOwner={isOwner}/>}\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.myPhotosContainer}>\r\n                    <div className={s.myPhotosBlock}>\r\n                        <p className={s.myPhotosTitle}>My photos <span>4</span></p>\r\n                        <div className={s.photos}>\r\n                            <div>\r\n                                <img src={profile.photos.large || userPhoto}/>\r\n                            </div>\r\n                            <div>\r\n                                <img src={photo1}/>\r\n                            </div>\r\n                            <div>\r\n                                <img src={photo2}/>\r\n                            </div>\r\n                            <div>\r\n                                <img src={photo3}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*<div className={s.myPostsContainer}>*/}\r\n                {/*    <div className={s.myPostsBlock}>*/}\r\n                        <MyPostsContainer login={login}/>\r\n                    {/*</div>*/}\r\n\r\n                {/*</div>*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\ntype PropsProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: PropsProfileDataType) => {\r\n    return (\r\n        <>\r\n            <div className={s.profileBodyTitle}>\r\n                <p>Full name:</p>\r\n                <p>Looking for a job:</p>\r\n                <p>My professional skills:</p>\r\n                <p>About me:</p>\r\n                <div><p className={s.contactsTitle}>Contacts</p></div>\r\n                <p>Facebook:</p>\r\n                <p>Website:</p>\r\n                <p>VK:</p>\r\n            </div>\r\n            <div className={s.profileBodyDescription}>\r\n                <p>{profile.fullName}</p>\r\n                <p> {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n                {profile.lookingForAJob &&\r\n                <p> {profile.lookingForAJobDescription}</p>\r\n                }\r\n                <p> {profile.aboutMe}</p>\r\n                <div className={s.line}></div>\r\n                <p> {profile.contacts.facebook}</p>\r\n                <p>{profile.contacts.website}</p>\r\n                <p>{profile.contacts.vk}</p>\r\n            </div>\r\n\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode} className={s.profileBodyButton}>Edit profile</button>\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype MassageMyPostPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File)=>void\r\n    saveProfile: (profile: FormProfileDataType)=>void\r\n    login:string | null\r\n}\r\n\r\nexport const Profile = (props: MassageMyPostPropsType) => {\r\n    return (\r\n        <>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n                         login={props.login}\r\n            />\r\n        </>)\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ReducerRootType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\nexport type PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type MapStateType = {\r\n    profile?: any\r\n    isAuth?: boolean\r\n    status: string\r\n    autorizedUserId: number | null,\r\n    login:string | null\r\n}\r\n\r\ntype MapDispatchType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: FormProfileDataType)=>void\r\n}\r\n\r\ntype OwnPropsType = MapStateType & MapDispatchType & PathParamsType\r\ntype CommonType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<CommonType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId !== null ? String(this.props.autorizedUserId) : '';\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                    login={this.props.login}\r\n                />\r\n            </>)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: ReducerRootType): MapStateType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        autorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login,\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}